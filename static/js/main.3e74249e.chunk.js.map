{"version":3,"sources":["components/Main/MainPage.js","App.js","reportWebVitals.js","index.js"],"names":["MainPage","Option","AutoComplete","useState","searchValue","setSearchValue","GET_VIEW","gql","useQuery","loading","error","data","res","search","edges","map","elem","node","message","className","style","width","onSearch","value","placeholder","length","item","title","onClick","url","window","open","labels","label","backgroundColor","color","name","position","right","top","client","ApolloClient","uri","cache","InMemoryCache","headers","authorization","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"otBAQO,IAAMA,EAAW,WAAO,IAAD,IACpBC,EAAWC,IAAXD,OADoB,EAGUE,mBAAS,IAHnB,mBAGrBC,EAHqB,KAGRC,EAHQ,KAItBC,EAAWC,cAAH,WAIVH,QAJU,IAIVA,IAAe,IARS,EA6BKI,mBAASF,GAAlCG,EA7BoB,EA6BpBA,QAASC,EA7BW,EA6BXA,MAAOC,EA7BI,EA6BJA,KAClBC,EAAG,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAME,cAAT,iBAAG,EAAcC,aAAjB,aAAG,EAAqBC,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAWpD,OAAIP,EAAa,UAAN,OAAiBA,EAAMQ,SAGhC,sBAAKC,UAAU,OAAf,UACE,sDACA,sBAAKA,UAAU,UAAf,UACE,cAAC,IAAD,CACEC,MAAO,CACLC,MAAO,QAETC,SAnBa,SAACC,GACpBlB,EAAekB,IAmBTC,YAAY,aACZD,MAAOnB,EANT,SAQGA,EAAYqB,OAAS,IAArB,OACCb,QADD,IACCA,OADD,EACCA,EAAKG,KAAI,SAACW,GAAD,OACP,cAACzB,EAAD,CAAuBsB,MAAOG,EAAKC,MAAnC,SACE,sBAAKR,UAAU,OAAOS,QAAS,kBAtBxBC,EAsB0CH,EAAKG,IArBlExB,EAAe,SACfyB,OAAOC,KAAKF,GAFM,IAACA,GAsBP,UACGH,EAAKC,MACN,qBAAKR,UAAU,aAAf,SACGO,EAAKM,OAAOlB,MAAMC,KAAI,SAACkB,GAAD,OACrB,mBACEd,UAAU,QACVC,MAAO,CACLc,gBAAgB,IAAD,OAAMD,EAAMhB,KAAKkB,QAHpC,SAOGF,EAAMhB,KAAKmB,MAFPH,EAAMhB,KAAKmB,eAVbV,EAAKG,WAoBvBpB,GACC,cAAC,IAAD,CAAMW,MAAO,CAAEiB,SAAU,WAAYC,MAAO,KAAMC,IAAK,gBChF3DC,G,cAAS,IAAIC,eAAa,CAC9BC,IAAK,iCACLC,MAAO,IAAIC,gBACXC,QAAS,CACPC,cAAc,sDAYHC,MARf,WACE,OACE,cAAC,iBAAD,CAAgBP,OAAQA,EAAxB,SACE,cAAC,EAAD,OCLSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3e74249e.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport { AutoComplete, Spin } from 'antd';\n\nimport { gql, useQuery } from '@apollo/client';\n\nimport './style.css';\n\nexport const MainPage = () => {\n  const { Option } = AutoComplete;\n\n  const [searchValue, setSearchValue] = useState('');\n  const GET_VIEW = gql`\nquery {\n  search(\n    query: \"user:facebook repo:react is:open is:issue in:title ${\n      searchValue ?? ''\n    }\"\n    type:ISSUE,\n    first: 20,\n  ) {\n    issueCount\n    edges {\n      node {\n        ... on Issue { \n          title\n          url\n          labels(first: 5) {\n            edges { node { name, color } }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\n  const { loading, error, data } = useQuery(GET_VIEW);\n  const res = data?.search?.edges?.map((elem) => elem.node);\n\n  const handleSearch = (value) => {\n    setSearchValue(value);\n  };\n\n  const handleClick = (url) => {\n    setSearchValue('');\n    window.open(url);\n  };\n\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <div className=\"main\">\n      <h1>GutHub Issues search</h1>\n      <div className=\"wrapper\">\n        <AutoComplete\n          style={{\n            width: '100%',\n          }}\n          onSearch={handleSearch}\n          placeholder=\"input here\"\n          value={searchValue}\n        >\n          {searchValue.length > 1 &&\n            res?.map((item) => (\n              <Option key={item.url} value={item.title}>\n                <div className=\"item\" onClick={() => handleClick(item.url)}>\n                  {item.title}\n                  <div className=\"label_list\">\n                    {item.labels.edges.map((label) => (\n                      <p\n                        className=\"label\"\n                        style={{\n                          backgroundColor: `#${label.node.color}`,\n                        }}\n                        key={label.node.name}\n                      >\n                        {label.node.name}\n                      </p>\n                    ))}\n                  </div>\n                </div>\n              </Option>\n            ))}\n        </AutoComplete>\n        {loading && (\n          <Spin style={{ position: 'absolute', right: '1%', top: '5px' }} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { MainPage } from './components/Main/MainPage';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nconst client = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  cache: new InMemoryCache(),\n  headers: {\n    authorization: `Bearer 98a64ec31f23bb480f5db180ecfa6ee2246bebde`,\n  },\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <MainPage />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}